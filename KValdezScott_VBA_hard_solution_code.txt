Private Sub Workbook_Open()

    If MsgBox("Press OK to begin process, or CANCEL to exit.", vbQuestion + vbOKCancel, "Kaylyn Valdez-Scott - Hard Solution") = vbOK Then
        Call GatherData
        MsgBox "Calculations complete", vbInformation, "Kaylyn Valdez-Scott - Hard Solution"
    End If
    

End Sub



Dim gl_ROW As Long

Sub GatherData()
    
    'Define Variables
    Dim sTICKER As String       'ticker symbol
    Dim sTempTICKER As String   'to monitor if ticker changes
    Dim WorksheetName As String 'ws name
    Dim LastRow As Long         'hold # of rows
        
    Dim dblHIGH As Double
    Dim dblHIGHest As Double
    
    Dim dblLOW As Double
    Dim dblLOWest As Double
    
    Dim dblOPEN As Double       'capture initial open for year
    Dim dblCLOSE As Double      'capture final close for year
    Dim lVOL As Double
    Dim lVOLtotal As Double
    Dim lCUR_ROW As Long
    Dim lINNERLOOP As Long
    
    'clear any old values from data
    Sheet22.Activate
    Range("a2", "f99999").Clear
    
    DoEvents
    
    'initialize variables
    gl_ROW = 2
    

    For Each ws In Worksheets
        ' Create a Variable to Hold File Name, Last Row, and Year
        ' Determine the Last Row
        LastRow = ws.Cells(Rows.Count, 1).End(xlUp).Row
        ' Grabbed the WorksheetName
        WorksheetName = ws.Name
        'If WorksheetName = "Data_Combined" Then
        '    Sheet7.Activate
        '    DoEvents
        '    Exit For
        'End If
            
        sTempTICKER = ws.Cells(2, 1)
        dblLOWest = ws.Cells(2, 5)
        dblHIGHest = ws.Cells(2, 4)
        dblOPEN = ws.Cells(2, 3)
        
        For lINNERLOOP = 2 To LastRow
        
            sTICKER = ws.Cells(lINNERLOOP, 1)
            
            If sTICKER <> sTempTICKER Then
                'calc all ticker values
                                        dblCLOSE = ws.Cells(lINNERLOOP - 1, 6)
                'write values to sheet
                
                'Sheet22.Activate
                Cells(gl_ROW, 1) = WorksheetName
                Cells(gl_ROW, 2) = sTempTICKER                          'ticker out
                Cells(gl_ROW, 3) = dblCLOSE - dblOPEN                  'yearly change out
                Cells(gl_ROW, 4) = (dblCLOSE - dblOPEN) / Abs(dblOPEN) 'perc% change out
                Cells(gl_ROW, 5) = lVOLtotal                           'total volume out
                gl_ROW = gl_ROW + 1
                sTempTICKER = sTICKER
                dblOPEN = ws.Cells(lINNERLOOP, 3)
                lVOLtotal = 0
                'Sheets(WorksheetName).Activate
                DoEvents
            Else
                'keep internal counting of ticker symbol
                 lVOL = ws.Cells(lINNERLOOP, 7)
                lVOLtotal = lVOLtotal + lVOL
                
            End If
            
        Next
        DoEvents
    Next

    'show percent change as a percentage
    Columns("D:D").Select
    Selection.NumberFormat = "0.00%"
    
    'build conditional formatting
    Columns("D:D").Select
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, _
        Formula1:="=0"
    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority
    With Selection.FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .Color = vbRed
        .TintAndShade = 0
    End With
    Selection.FormatConditions(1).StopIfTrue = False
    
    'Columns("D:D").Select
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, _
        Formula1:="=0"
    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority
    With Selection.FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .Color = vbGreen
        .TintAndShade = 0
    End With
    Selection.FormatConditions(1).StopIfTrue = False
    'build conditional formatting
    Columns("C:C").Select
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, _
        Formula1:="=0"
    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority
    With Selection.FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .Color = vbRed
        .TintAndShade = 0
    End With
    Selection.FormatConditions(1).StopIfTrue = False
    
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, _
        Formula1:="=0"
    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority
    With Selection.FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .Color = vbGreen
        .TintAndShade = 0
    End With
    Selection.FormatConditions(1).StopIfTrue = False
    

End Sub

